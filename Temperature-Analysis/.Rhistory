title = "Card 5",
closable = TRUE,
width = 6,
solidHeader = TRUE,
status = "success",
collapsible = TRUE,
p("Box Content")
)
)
)
)
),
server = function(input, output, session) { # Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"hyderabad" = hyderabad,
"bengaluru" = bengaluru,
"bombay" = bombay)
})
output$caption <- renderText({
input$caption
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
observe({
if(!exists(input$dataset)) return() #make sure upload exists
var.opts<-colnames(get(input$dataset))
updateSelectInput(session, "variable", choices = var.opts)
updateSelectInput(session, "group", choices = var.opts)
})
output$caption<-renderText({
switch(input$plot.type,
"boxplot" 	= 	"Boxplot",
"histogram" =	"Histogram",
"density" 	=	"Density plot",
"bar" 		=	"Bar graph")
})
output$plot <- renderUI({
plotOutput("p")
})
get_data<-reactive({
if(!exists(input$dataset)) return() # if no upload
check<-function(x){is.null(x) || x==""}
if(check(input$dataset)) return()
obj<-list(data=get(input$dataset),
variable=input$variable,
group=input$group
)
if(any(sapply(obj,check))) return()
check<-function(obj){
!all(c(obj$variable,obj$group) %in% colnames(obj$data))
}
if(check(obj)) return()
obj
})
output$p <- renderPlot({
plot.obj<-get_data()
if(is.null(plot.obj)) return()
if(plot.obj$variable == "" | plot.obj$group =="") return()
#plot types
plot.type<-switch(input$plot.type,
"boxplot" 	= geom_boxplot(fill='#e8b600', color="black"),
"histogram" =	geom_histogram( position = "identity",alpha=0.4),
"density" 	=	geom_density(aes(fill = ""),alpha=.75),
"bar" 		=	geom_bar(position="dodge")
)
if(input$plot.type=="boxplot")	{
p<-ggplot(plot.obj$data,
aes_string(
x 		= plot.obj$group,
y 		= plot.obj$variable,
fill 	= plot.obj$group
)
) + plot.type
if(input$show.points==TRUE)
{
p<-p+ geom_point(color='#444e52',alpha=0.5, position = 'jitter')
}
} else {
p<-ggplot(plot.obj$data,
aes_string(
x 		= plot.obj$variable,
fill 	= plot.obj$group,
group 	= plot.obj$group
#color 	= as.factor(plot.obj$group)
)
) + plot.type
}
p<-p+labs(
fill 	= input$group,
x 		= "",
y 		= input$variable
)  +
.theme
print(p)
})
upload_data<-reactive({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
s
read.csv(inFile$datapath,
header = input$header,
sep = input$sep)
})
observeEvent(input$file1,{
inFile<<-upload_data()
})
}
)
install.packages("bs4Dash")
install.packages("bs4Dash")
install.packages("dpylr")
library(shiny)
library(ggplot2)
library(bs4Dash)
library(fresh)
library(purrr)
library(readr)
library(ggthemes)
hyderabad <- read.csv("D:/Datasets/hyderabad.csv")
bengaluru <- read.csv("D:/Datasets/bengaluru.csv")
bombay <- read.csv("D:/Datasets/bombay.csv")
delhi <- read.csv("D:/Datasets/delhi.csv")
jaipur <- read.csv("D:/Datasets/jaipur.csv")
kanpur <- read.csv("D:/Datasets/kanpur.csv")
nagpur <- read.csv("D:/Datasets/nagpur.csv")
pune <- read.csv("D:/Datasets/pune.csv")
#plotting theme for ggplot2
.theme<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank()
)
bs4DashTheme <- create_theme(
bs4dash_vars(
navbar_dark_color = "#bec5cb",
navbar_dark_active_color = "#FFF",
navbar_dark_hover_color = "#FFF"
),
bs4dash_yiq(contrasted_threshold = 10, text_dark = "#FFF", text_light = "#272c30"),
bs4dash_layout(main_bg = "#353c42"),
bs4dash_sidebar_dark(
bg = "#272c30", color = "#bec5cb", hover_color = "#FFF",
submenu_bg = "#272c30", submenu_color = "#FFF", submenu_hover_color = "#FFF"
),
bs4dash_status(dark = "#272c30"),
bs4dash_color(gray_900 = "#FFF", white = "#272c30")
)
shiny::shinyApp(
ui = bs4DashPage(
navbar = bs4DashNavbar(
skin = "dark",
status = "dark",
border = TRUE,
sidebarIcon = "bars",
controlbarIcon = "th",
fixed = FALSE,
leftUi = bs4DropdownMenu(
show = FALSE,
align = "left",
status = "warning",
menuIcon = "envelope-open",
src = NULL
),
rightUi =
bs4DropdownMenu(
show = FALSE,
status = "danger",
src = "https://www.google.fr",
bs4DropdownMenuItem(
message = "message 1",
from = "Ranjith",
src = "https://static.vecteezy.com/system/resources/previews/000/142/007/original/headshot-of-smiling-young-man-with-beard-vector.jpg",
time = "today",
status = "danger",
type = "message"
), bs4DropdownMenuItem(
message = "message 1",
from = "Merin",
src = "https://static.vecteezy.com/system/resources/previews/000/141/702/original/headshot-of-smiling-beautiful-employee-vector.jpg",
time = "3 Days ago",
status = "success",
type = "message"
), bs4DropdownMenuItem(
message = "message 1",
from = "Glennis",
src = "https://static.vecteezy.com/system/resources/previews/000/142/014/non_2x/headshot-of-smiling-women-with-orange-dress-vector.jpg",
time = "4 Days ago",
status = "danger",
type = "message"
),
bs4DropdownMenuItem(
message = "message 2",
from = "Brinda",
src = "https://static.vecteezy.com/system/resources/previews/000/141/732/non_2x/headshot-of-smiling-older-lady-vector.jpg",
time = "5 Days ago",
status = "success",
type = "message"
)
)
),
sidebar = bs4DashSidebar(
bs4SidebarMenu( skin = "dark",
status = "primary",
brandColor = "primary",
elevation = 3,
opacity = 0,
bs4SidebarUserPanel(
img = "https://www.svgrepo.com/show/276664/cloudy-day-weather.svg",
text = "WERTHER FORECAST"
),
bs4SidebarHeader(
title = "Welcome to DashBoard!"
),
bs4SidebarHeader("List of items 1"),
bs4SidebarMenuItem(
text = "Item List",
icon = "bars",
startExpanded = TRUE,
bs4SidebarMenuSubItem(
text = "Home",
tabName = "item1",
icon = "home"
),    bs4SidebarMenuItem(text = "Select Options", icon = "th-list",
startExpanded = FALSE,
bs4Card( width = 16,
bs4dash_sidebar_dark
(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Semicolon = ";",
Comma = ",",
Tab = "\t"),
selected = ","),
tags$hr(),
selectInput("dataset","Data:",
choices =list(hyderabad="hyderabad",bengaluru="bengaluru",bombay="bombay",delhi="delhi",jaipur="jaipur",kanpur="kanpur",nagpur="nagpur",pune="pune",
uploaded_file = "inFile"), selected=NULL),
selectInput("group","VariableX:", choices = NULL),
selectInput("variable","VariableY:", choices = NULL),
selectInput("plot.type","Plot Type:",
list(boxplot = "boxplot", histogram = "histogram", density = "density", bar = "bar")
),
checkboxInput("show.points", "show points", TRUE)
))),
bs4SidebarMenuSubItem(
text = "Data's",
tabName = "item2",
icon = "table"
),bs4SidebarMenuItem(text = "Weather Data", icon="th-list",
startExpanded = FALSE,
bs4Card(width = 16,
bs4dash_sidebar_dark(
textInput(inputId = "caption",
label = "Caption:",
value = "Data Summary"),
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("hyderabad", "bengaluru", "bombay")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
)
)
)
),
bs4SidebarHeader("List of items 2"),
bs4SidebarMenuItem(
text = "Item List 2",
icon = "bars",
startExpanded = TRUE,
#active = FALSE,
bs4SidebarMenuSubItem(
text = "Analysis",
tabName = "item4",
icon = "a fa-bar-chart-o"
),
bs4SidebarMenuSubItem(
text = "Info",
tabName = "item5",
icon = "info"
)
)
)
),
controlbar = bs4DashControlbar(),
footer = bs4DashFooter(),
title = "test",
body = bs4DashBody(
bs4TabItems(
bs4TabItem(
tabName = "item1",
fluidRow( bs4ValueBox(
value = "25'c",
subtitle = "Tempature",
status = "danger",
icon = "temperature-low",
href = "#",
width = 4
),
bs4ValueBox(
value = 25,
subtitle = "Wind Speed",
status = "primary",
icon = "cloud-meatball",
href = "#",
width = 4
),
bs4ValueBox(
value = "12",
subtitle = "SunHour",
status = "warning",
icon = "sun",
href = "#",
width = 4
)
),
fluidRow(
bs4InfoBox(tabName = NULL,title ="Tempature" ,value = NULL, icon = "fas fa-temperature-high",iconElevation = 3,status = NULL,gradientColor = "red",width = 4,elevation = NULL,href="#"),
infoBox(tabName = NULL,title ="Cloud" ,value = NULL, icon = "fas fa-smog",iconElevation = 3,status = NULL,gradientColor = "blue",width = 4,elevation = NULL),
infoBox(tabName = NULL,title ="SunHOur" ,value = NULL, icon = "fas fa-sun",iconElevation = 3,status = NULL,gradientColor = "yellow",width = 4,elevation = NULL)),
bs4Card(
title = "WEATHER",
elevation = 3,
closable = TRUE,
width = 12,
solidHeader = TRUE,
status = "primary",
collapsible = TRUE,
bs4Badge(
position = "right",
status = "warning",
"PLOTTING"),
h3(textOutput("caption")),
#h3(htmlOutput("caption")),
uiOutput("plot") ,# depends on input
p("Box Content")
)
),
bs4TabItem(
tabName = "item2",
bs4Card(
title = "Data Overview",
elevation = 3,
ribbon = TRUE,
closable = TRUE,
width = 6,
solidHeader = TRUE,
status = "warning",
collapsible = TRUE,
h3(textOutput("caption", container = span)),
verbatimTextOutput("summary"),
tableOutput("view"),
p("Box Content")
)
),
bs4TabItem(
tabName = "item3",
bs4Card(
title = "Card 3",
closable = TRUE,
width = 6,
solidHeader = TRUE,
status = "danger",
collapsible = TRUE,
p("Box Content")
)
),
bs4TabItem(
tabName = "item4",
bs4Card(
title = "Card 4",
closable = TRUE,
width = 6,
solidHeader = TRUE,
status = "info",
collapsible = TRUE,
p("Box Content")
)
),
bs4TabItem(
tabName = "item5",
bs4Card(
title = "Card 5",
closable = TRUE,
width = 6,
solidHeader = TRUE,
status = "success",
collapsible = TRUE,
p("Box Content")
)
)
)
)
),
server = function(input, output, session) { # Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"hyderabad" = hyderabad,
"bengaluru" = bengaluru,
"bombay" = bombay)
})
output$caption <- renderText({
input$caption
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
observe({
if(!exists(input$dataset)) return() #make sure upload exists
var.opts<-colnames(get(input$dataset))
updateSelectInput(session, "variable", choices = var.opts)
updateSelectInput(session, "group", choices = var.opts)
})
output$caption<-renderText({
switch(input$plot.type,
"boxplot" 	= 	"Boxplot",
"histogram" =	"Histogram",
"density" 	=	"Density plot",
"bar" 		=	"Bar graph")
})
output$plot <- renderUI({
plotOutput("p")
})
get_data<-reactive({
if(!exists(input$dataset)) return() # if no upload
check<-function(x){is.null(x) || x==""}
if(check(input$dataset)) return()
obj<-list(data=get(input$dataset),
variable=input$variable,
group=input$group
)
if(any(sapply(obj,check))) return()
check<-function(obj){
!all(c(obj$variable,obj$group) %in% colnames(obj$data))
}
if(check(obj)) return()
obj
})
output$p <- renderPlot({
plot.obj<-get_data()
if(is.null(plot.obj)) return()
if(plot.obj$variable == "" | plot.obj$group =="") return()
#plot types
plot.type<-switch(input$plot.type,
"boxplot" 	= geom_boxplot(fill='#e8b600', color="black"),
"histogram" =	geom_histogram( position = "identity",alpha=0.4),
"density" 	=	geom_density(aes(fill = ""),alpha=.75),
"bar" 		=	geom_bar(position="dodge")
)
if(input$plot.type=="boxplot")	{
p<-ggplot(plot.obj$data,
aes_string(
x 		= plot.obj$group,
y 		= plot.obj$variable,
fill 	= plot.obj$group
)
) + plot.type
if(input$show.points==TRUE)
{
p<-p+ geom_point(color='#444e52',alpha=0.5, position = 'jitter')
}
} else {
p<-ggplot(plot.obj$data,
aes_string(
x 		= plot.obj$variable,
fill 	= plot.obj$group,
group 	= plot.obj$group
#color 	= as.factor(plot.obj$group)
)
) + plot.type
}
p<-p+labs(
fill 	= input$group,
x 		= "",
y 		= input$variable
)  +
.theme
print(p)
})
upload_data<-reactive({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
s
read.csv(inFile$datapath,
header = input$header,
sep = input$sep)
})
observeEvent(input$file1,{
inFile<<-upload_data()
})
}
)
